Prompt diario para actualizar el log:
Hola, te adjunto el Excel actualizado del día y el log del día anterior.
Por favor, agregá al log las novedades:

Nuevos registros (RM + ASIGNADO A no estaban en el log anterior).

Registros eliminados.

Registros modificados, indicando todos los campos que cambiaron con su valor anterior y nuevo.

Considerá como clave primaria la combinación de:

NUMERO RM

ASIGNADO A

Compará todos los campos del Excel en la detección de cambios:

ASIGNADO A

PRIORIDAD

PROYECTO

ESTADO TRELLO

NUMERO RM

ASUNTO

Generá el nuevo log en formato .txt con la misma estructura usada hasta ahora. Agregale a cada uno de los registros la fecha en que se genero el log

LOS REGISTROS NUEVOS AGREGALOS AL PRINCIPIO Y AL FINAL SUMA EL CONTENDIDO DEL LOG ANTERIOR ADJUNTO, PARA QUE EL RESULTADO FINAL SEA LA HITORIA COMOLETA

Python de referencia:

import pandas as pd
from datetime import datetime

# === CONFIGURACIÓN DE ARCHIVOS ===
excel_path = "Reporte_Consolidado.xlsx"
log_path = "log_asignaciones_2025_04_07.txt"
output_path = "log_asignaciones_2025_04_08.txt"

# === CAMPOS DE COMPARACIÓN Y CLAVE PRIMARIA ===
campos = [
    "NUMERO RM",
    "ASIGNADO A",
    "PRIORIDAD",
    "PROYECTO",
    "ESTADO TRELLO",
    "ASUNTO"
]

# === CARGA DEL EXCEL ACTUAL ===
df_actual = pd.read_excel(excel_path)
df_actual = df_actual[campos].dropna(subset=["NUMERO RM", "ASIGNADO A"], how="all")
df_actual = df_actual.fillna("nan")
df_actual["CLAVE"] = df_actual["NUMERO RM"].astype(str) + "|" + df_actual["ASIGNADO A"]

# === PARSEAR EL LOG ANTERIOR ===
with open(log_path, "r", encoding="utf-8") as file:
    log_lines = file.read().split("----------------------------------------")

def parse_log_entry(entry):
    data = {campo: "nan" for campo in campos}
    for line in entry.strip().splitlines():
        if ": " in line:
            key, value = line.split(": ", 1)
            if key in data:
                data[key] = value.strip()
    return data

log_data = [parse_log_entry(entry) for entry in log_lines if entry.strip()]
df_log = pd.DataFrame(log_data)
df_log = df_log.fillna("nan")
df_log["CLAVE"] = df_log["NUMERO RM"].astype(str) + "|" + df_log["ASIGNADO A"]

# === DETECCIÓN DE CAMBIOS ===
claves_actuales = set(df_actual["CLAVE"])
claves_anteriores = set(df_log["CLAVE"])

nuevos = df_actual[df_actual["CLAVE"].isin(claves_actuales - claves_anteriores)]
eliminados = df_log[df_log["CLAVE"].isin(claves_anteriores - claves_actuales)]

comunes = df_actual[df_actual["CLAVE"].isin(claves_actuales & claves_anteriores)]
comunes_previos = df_log[df_log["CLAVE"].isin(claves_actuales & claves_anteriores)]

comunes_merged = pd.merge(
    comunes, comunes_previos,
    on="CLAVE",
    suffixes=("_ACTUAL", "_ANTERIOR")
)

modificados = []
for _, row in comunes_merged.iterrows():
    cambios = {}
    for campo in campos:
        campo_actual = f"{campo}_ACTUAL"
        campo_anterior = f"{campo}_ANTERIOR"
        if str(row[campo_actual]) != str(row[campo_anterior]):
            cambios[campo] = (row[campo_anterior], row[campo_actual])
    if cambios:
        modificados.append((row["CLAVE"], cambios))

# === GENERACIÓN DEL LOG NUEVO ===
def formatear_registro(row, cambios=None):
    fecha = datetime.today().strftime("%Y-%m-%d")
    lineas = [f"FECHA LOG: {fecha}"]
    for campo in campos:
        lineas.append(f"{campo}: {row.get(campo, 'nan')}")
    if cambios:
        lineas.append("CAMBIOS DETECTADOS:")
        for campo, (antes, despues) in cambios.items():
            lineas.append(f"{campo}: '{antes}' → '{despues}'")
    lineas.append("----------------------------------------")
    return "\n".join(lineas)

nuevos_txt = "\n".join(formatear_registro(row) for _, row in nuevos.iterrows())
eliminados_txt = "\n".join(formatear_registro(row) for _, row in eliminados.iterrows())
modificados_txt = "\n".join(
    formatear_registro(df_actual[df_actual["CLAVE"] == clave].iloc[0], cambios)
    for clave, cambios in modificados
)

with open(log_path, "r", encoding="utf-8") as f:
    log_anterior = f.read().strip()

log_final = "\n".join([
    "# REGISTROS NUEVOS",
    nuevos_txt,
    "# REGISTROS MODIFICADOS",
    modificados_txt,
    "# REGISTROS ELIMINADOS",
    eliminados_txt,
    "# HISTORIAL COMPLETO",
    log_anterior
])

with open(output_path, "w", encoding="utf-8") as f:
    f.write(log_final)

print("Log actualizado generado en:", output_path)
