A partir de este prompt, armar el cofigo python para realizar este proceso: dejo adjunto un ejemplo de los archivos para que tengas mas referencia: Solicitud de procesamiento de datos a partir de archivos CSV y generaci√≥n de archivo Excel consolidado

Hola, necesito que proceses dos archivos CSV para generar un nuevo archivo Excel con informaci√≥n combinada. A continuaci√≥n, detallo todos los pasos que deb√©s seguir cuidadosamente para que el proceso sea exitoso:

üîπ Archivos involucrados

Archivo principal

El nombre del archivo es una cadena num√©rica (por ejemplo: 123456.csv).

Est√° delimitado por comas (,).

Contiene una columna A con cadenas de texto que incluyen un n√∫mero entre la palabra "RM" y el s√≠mbolo "|".

La columna D contiene informaci√≥n adicional que debe ser extra√≠da completa.

Archivo adicional (referencial)

Nombre: issues.csv

Delimitado por punto y coma (;)

Contiene una columna con valores num√©ricos (formato int64) que deben ser comparados con los n√∫meros extra√≠dos del archivo principal.

‚ö†Ô∏è Consideraciones importantes

La columna del archivo principal contiene los n√∫meros como texto (string), mientras que issues.csv los tiene como n√∫meros (int64).

Convert√≠ los valores extra√≠dos del archivo principal a tipo num√©rico antes de realizar el cruce.

Si al leer alguno de los archivos ocurre un error de codificaci√≥n, intent√° reabrirlos utilizando una codificaci√≥n alternativa como:

"utf-8-sig"

"latin1"

üîÑ Proceso detallado

‚úÖ Paso 1: Extracci√≥n de datos del archivo principal

Desde la Columna A, extra√© √∫nicamente los n√∫meros ubicados entre la palabra "RM" y el s√≠mbolo "|" en cada celda.

Manten√© el encabezado original de la columna A.

Extra√© tambi√©n el contenido completo de la Columna D, incluyendo su encabezado.

Extra√© tambi√©n de la Columna C, las cadenas "ROBUSTECIMIENTO" o "CIERRE CUENTA DE INVERSI√ìN" o "CIERRE DE BALANCE...%" "INCIDENCIA PRODUCTIVA" o "[ PRIORIDAD ... ]" o " [ #... ALTA ]" (tener en cuenta que el numero de la prioridad puede ir variando.. tambien puede ir variando la cadena ALTA, MEDIA, ETC. tambien es conciderado como estado de prioridad) Dentro de esta celda cada una de las cadena estan separadas por ",". En caso de encontrar mas de una de las cadenas especificadas en una de las celdas, extraer todas.

‚úÖ Paso 2: Cruce con issues.csv

Us√° los n√∫meros extra√≠dos de la Columna A como clave de b√∫squeda para encontrar coincidencias en issues.csv.

Por cada coincidencia, extra√© los siguientes campos:

El valor de la columna "Estado".

El valor de la columna "Asignado a".

‚úÖ Paso 3: Generaci√≥n del archivo Excel final

Cre√° un archivo .xlsx con la siguiente estructura:

Columna	Descripci√≥n
A	N√∫meros extra√≠dos de la Columna A del archivo principal (Nombre en Excel: N√∫mero RM)
B	Contenido de la Columna D del archivo principal (Nombre en Excel: Estado TRELLO)
C	Valor de la columna "Estado" desde issues.csv (Nombre en Excel: Estado RM)
D	Valor de la columna "Asignado a" desde issues.csv (Nombre en Excel: Asignado a)
E	Valor de la columna "Asunto" desde issues.csv (Nombre en Excel: Asunto)
F   Completar con la palabra "SI", en el caso que dentro del Contenido extraido de la Columna D del archivo principal, se haya encontrado la cadena "ROBUSTECIMIENTO". (Nombre en Excel: ROBUSTECIMIENTO)
G   Completar con la palabra "SI", en el caso que dentro del Contenido extraido de la Columna D del archivo principal, se haya encontrado la cadena "CIERRE CUENTA DE INVERSI√ìN" o "CIERRE DE BALANCE...%" (Nombre en Excel: CIERRE CUENTA DE INVERSI√ìN)
H  Completar con la palabra "SI", en el caso que dentro del Contenido extraido de la Columna D del archivo principal, se haya encontrado la cadena "INCIDENCIA PRODUCTIVA". (Nombre en Excel: INCIDENCIA PRODUCTIVA)
I  Completar con la cadena de "prioridad" [ PRIORIDAD 0X ] o ALTA , BAJA ETC, en el caso que dentro del Contenido extra√≠do de la Columna D del archivo principal, se haya encontrado la cadena "[ PRIORIDAD...]" O ALTA, BAJA.... (Nombre en Excel: PRIORIDAD).

Las columnas F, G y H centrar el contenido

üé® Formato y resaltado condicional en Excel (aplicar el formato desde la columna "A" hasta la "I" 

- Encabezados en MAY√öSCULAS, negrita, fondo gris claro.
- Si ASUNTO est√° vac√≠o:
  - Completar con "RM CERREDO"
  - Resaltar toda la fila en amarillo.

- Si "Estado RM est√° vac√≠o:
  - Completar con "RM CERREDO"
  - Resaltar toda la fila en amarillo.

- Si las columnas ROBUSTECIMIENTO	CIERRE CUENTA DE INVERSI√ìN	INCIDENCIA PRODUCTIVA estan vacias:
  -Completar con "NO" 
 

Si una fila cumple con las siguientes dos condiciones simult√°neamente:

En la columna "Estado TRELLO" contiene alguno de estos valores:

04 En Desarrollo | STAND BY

05 En Desarrollo | EN CURSO

07 En Prueba QA | BACKLOG

08 En Prueba QA | EN CURSO

10 Solicitud de Pasaje a PROD.

Y en la columna "Asignado a" se encuentra alguno de estos nombres:

Dario Elola

Nelson Daniel Bord√≥n

Valentina Juszkiewicz

Renzo Antonioli

Lucas Gutierrez

Vanina Zylberg

Carolina Noemi Gualdi

Franchesca Gabriela Rivas Veliz

Entonces, rellen√° esa fila en las columnas:

N√∫mero RM

Estado TRELLO

Estado RM

Asignado a

Asunto

...con color rojo.

üì¶ Entrega esperada

Un archivo Excel (.xlsx) generado con la estructura anterior, correctamente combinado y con los colores aplicados seg√∫n las reglas definidas.

- **‚ûï Nueva regla adicional de resaltado:**

  Si en un registro la columna **"Estado TRELLO"** contiene alguno de estos valores:

  - `05 En Desarrollo | EN CURSO`

  Y en la columna **"Estado RM"** existe cualquier texto que no contenga las palabras **"Desarrollo"** (no distingue may√∫sculas o min√∫sculas), entonces:

  Rellen√° toda la fila correspondiente de las columnas:

  - N√∫mero RM  
  - Estado TRELLO  
  - Estado RM  
  - Asignado a  
  - Asunto  

  ...con color **rojo**.

 Si en un registro la columna **"Estado TRELLO"** NO contiene alguno de estos valores:

  - `05 En Desarrollo | EN CURSO`

  Y en la columna **"Estado RM"** existe cualquier texto que contenga las palabras **"Desarrollo"** (no distingue may√∫sculas o min√∫sculas), entonces:

  Rellen√° toda la fila correspondiente de las columnas:

  - N√∫mero RM  
  - Estado TRELLO  
  - Estado RM  
  - Asignado a  
  - Asunto  

  ...con color **rojo**.
  
    Si en un registro la columna **"Estado TRELLO"** contiene alguno de estos valores:

  - `04 En Desarrollo | STAND BY`

  Y en la columna **"Estado RM"** existe cualquier texto que no contenga las palabras **"STAND BY"** (no distingue may√∫sculas o min√∫sculas), entonces:

  Rellen√° toda la fila correspondiente de las columnas:

  - N√∫mero RM  
  - Estado TRELLO  
  - Estado RM  
  - Asignado a  
  - Asunto  

  ...con color **rojo**.


IMPORTANTE: Realiza el proceso de principio a fin, hasta llegar a la generacion de del archivo .xlsx para descargar sin consultarme. No omitas ninguna de las intrucciones anteriores... Revisa y asegurate que se aplique todo.


SUMO EJEMPLO DEL PAYTHON CON EL PROCESO:

import pandas as pd
import re
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils.dataframe import dataframe_to_rows

# Leer archivos CSV
def read_csv_with_encoding(file_path, delimiter):
    encodings = ["utf-8", "utf-8-sig", "latin1"]
    for enc in encodings:
        try:
            return pd.read_csv(file_path, encoding=enc, delimiter=delimiter)
        except Exception:
            continue
    raise ValueError(f"No se pudo leer el archivo: {file_path}")

# Cargar archivos
file_paths = [
    "/mnt/data/1744030225155.csv",
    "/mnt/data/1744032665788.csv",
    "/mnt/data/issues.csv"
]

# Procesar archivo principal (puede ser cualquiera de los dos primeros)
try:
    main_df = read_csv_with_encoding(file_paths[0], ',')
    if 'A' not in main_df.columns or 'C' not in main_df.columns or 'D' not in main_df.columns:
        main_df = read_csv_with_encoding(file_paths[1], ',')
except Exception as e:
    raise RuntimeError("Error al leer los archivos principales") from e

# Leer archivo issues.csv
issues_df = read_csv_with_encoding(file_paths[2], ';')

# Funciones de extracci√≥n
def extract_rm_number(text):
    match = re.search(r'RM\s*(\d+)\s*\|', str(text))
    return int(match.group(1)) if match else None

def extract_priority(text):
    priorities = []
    if pd.isna(text):
        return ""
    text = str(text)
    matches = re.findall(r"\[ PRIORIDAD[^\]]+\]", text, flags=re.IGNORECASE)
    matches += re.findall(r"\b(ALTA|MEDIA|BAJA)\b", text, flags=re.IGNORECASE)
    return ", ".join(set(matches))

def contains_keyword(text, keyword):
    return "SI" if keyword.lower() in str(text).lower() else "NO"

def contains_any(text, keywords):
    text = str(text).lower()
    return any(k.lower() in text for k in keywords)

# Procesar datos
main_df['N√∫mero RM'] = main_df['A'].apply(extract_rm_number)
main_df['Estado TRELLO'] = main_df['D']
main_df['ROBUSTECIMIENTO'] = main_df['C'].apply(lambda x: "SI" if contains_any(x, ["ROBUSTECIMIENTO"]) else "NO")
main_df['CIERRE CUENTA DE INVERSI√ìN'] = main_df['C'].apply(lambda x: "SI" if contains_any(x, ["CIERRE CUENTA DE INVERSI√ìN", "CIERRE DE BALANCE"]) else "NO")
main_df['INCIDENCIA PRODUCTIVA'] = main_df['C'].apply(lambda x: "SI" if contains_any(x, ["INCIDENCIA PRODUCTIVA"]) else "NO")
main_df['PRIORIDAD'] = main_df['C'].apply(extract_priority)

# Convertir para merge
issues_df['N√∫mero RM'] = issues_df.iloc[:, 0].astype('Int64')
merged_df = pd.merge(main_df, issues_df, on='N√∫mero RM', how='left')

# Renombrar columnas
final_df = merged_df[[
    'N√∫mero RM', 'Estado TRELLO', 'Estado', 'Asignado a', 'Asunto',
    'ROBUSTECIMIENTO', 'CIERRE CUENTA DE INVERSI√ìN', 'INCIDENCIA PRODUCTIVA', 'PRIORIDAD'
]].copy()
final_df.columns = [
    'N√∫mero RM', 'Estado TRELLO', 'Estado RM', 'Asignado a', 'Asunto',
    'ROBUSTECIMIENTO', 'CIERRE CUENTA DE INVERSI√ìN', 'INCIDENCIA PRODUCTIVA', 'PRIORIDAD'
]

# Rellenar celdas vac√≠as seg√∫n reglas
final_df['Estado RM'].fillna("RM CERREDO", inplace=True)
final_df['Asunto'].fillna("RM CERREDO", inplace=True)
for col in ['ROBUSTECIMIENTO', 'CIERRE CUENTA DE INVERSI√ìN', 'INCIDENCIA PRODUCTIVA']:
    final_df[col] = final_df[col].replace("", "NO")

# Guardar como Excel con formato
wb = Workbook()
ws = wb.active
ws.title = "Consolidado"

# Escribir encabezado
header_fill = PatternFill(start_color="D3D3D3", end_color="D3D3D3", fill_type="solid")
bold_font = Font(bold=True)

for r_idx, row in enumerate(dataframe_to_rows(final_df, index=False, header=True), start=1):
    for c_idx, value in enumerate(row, start=1):
        cell = ws.cell(row=r_idx, column=c_idx, value=value)
        if r_idx == 1:
            cell.font = bold_font
            cell.fill = header_fill
        if ws.cell(row=1, column=c_idx).value in ['ROBUSTECIMIENTO', 'CIERRE CUENTA DE INVERSI√ìN', 'INCIDENCIA PRODUCTIVA']:
            cell.alignment = Alignment(horizontal='center')

# Aplicar reglas de formato condicional (coloreado)
highlight_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")
highlight_red = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")

asignados = [
    "Dario Elola", "Nelson Daniel Bord√≥n", "Valentina Juszkiewicz", "Renzo Antonioli",
    "Lucas Gutierrez", "Vanina Zylberg", "Carolina Noemi Gualdi", "Franchesca Gabriela Rivas Veliz"
]
estado_trello_relevantes = [
    "04 En Desarrollo | STAND BY", "05 En Desarrollo | EN CURSO", "07 En Prueba QA | BACKLOG",
    "08 En Prueba QA | EN CURSO", "10 Solicitud de Pasaje a PROD."
]

for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
    estado_trello = row[1].value or ""
    estado_rm = row[2].value or ""
    asignado_a = row[3].value or ""
    asunto = row[4].value or ""

    if asunto == "RM CERREDO" or estado_rm == "RM CERREDO":
        for cell in row:
            cell.fill = highlight_fill

    if estado_trello in estado_trello_relevantes and asignado_a in asignados:
        for i in range(5):  # A-E
            row[i].fill = highlight_red

    if estado_trello == "05 En Desarrollo | EN CURSO" and "desarrollo" not in estado_rm.lower():
        for i in range(5):  # A-E
            row[i].fill = highlight_red

    if estado_trello != "05 En Desarrollo | EN CURSO" and "desarrollo" in estado_rm.lower():
        for i in range(5):  # A-E
            row[i].fill = highlight_red

    if estado_trello == "04 En Desarrollo | STAND BY" and "stand by" not in estado_rm.lower():
        for i in range(5):  # A-E
            row[i].fill = highlight_red

# Guardar archivo
output_path = "/mnt/data/Consolidado_RM.xlsx"
wb.save(output_path)

output_path
