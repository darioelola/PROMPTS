Solicitud de procesamiento de datos a partir de archivos CSV y generaci√≥n de archivo Excel consolidado

Hola, necesito que proceses dos archivos CSV para generar un nuevo archivo Excel con informaci√≥n combinada. A continuaci√≥n, detallo todos los pasos que deb√©s seguir cuidadosamente para que el proceso sea exitoso:

üîπ Archivos involucrados

Archivo principal

El nombre del archivo es una cadena num√©rica (por ejemplo: 123456.csv).

Est√° delimitado por comas (,).

Contiene una columna A con cadenas de texto que incluyen un n√∫mero entre la palabra "RM" y el s√≠mbolo "|".

La columna D contiene informaci√≥n adicional que debe ser extra√≠da completa.

Archivo adicional (referencial)

Nombre: issues.csv

Delimitado por punto y coma (;)

Contiene una columna con valores num√©ricos (formato int64) que deben ser comparados con los n√∫meros extra√≠dos del archivo principal.

‚ö†Ô∏è Consideraciones importantes

La columna del archivo principal contiene los n√∫meros como texto (string), mientras que issues.csv los tiene como n√∫meros (int64).

Convert√≠ los valores extra√≠dos del archivo principal a tipo num√©rico antes de realizar el cruce.

Si al leer alguno de los archivos ocurre un error de codificaci√≥n, intent√° reabrirlos utilizando una codificaci√≥n alternativa como:

"utf-8-sig"

"latin1"

üîÑ Proceso detallado

‚úÖ Paso 1: Extracci√≥n de datos del archivo principal

Desde la Columna A, extra√© √∫nicamente los n√∫meros ubicados entre la palabra "RM" y el s√≠mbolo "|" en cada celda.

Manten√© el encabezado original de la columna A.

Extra√© tambi√©n el contenido completo de la Columna D, incluyendo su encabezado.

‚úÖ Paso 2: Cruce con issues.csv

Us√° los n√∫meros extra√≠dos de la Columna A como clave de b√∫squeda para encontrar coincidencias en issues.csv.

Por cada coincidencia, extra√© los siguientes campos:

El valor de la columna "Estado".

El valor de la columna "Asignado a".

‚úÖ Paso 3: Generaci√≥n del archivo Excel final

Cre√° un archivo .xlsx con la siguiente estructura:

Columna	Descripci√≥n
A	N√∫meros extra√≠dos de la Columna A del archivo principal (Nombre en Excel: N√∫mero RM)
B	Contenido de la Columna D del archivo principal (Nombre en Excel: Estado TRELLO)
C	Valor de la columna "Estado" desde issues.csv (Nombre en Excel: Estado RM)
D	Valor de la columna "Asignado a" desde issues.csv (Nombre en Excel: Asignado a)
E	Valor de la columna "Asunto" desde issues.csv (Nombre en Excel: Asunto)
üé® Formato y resaltado condicional en Excel

Si una celda en la columna "Estado RM" est√° vac√≠a, rellen√° toda la fila correspondiente de las columnas:

N√∫mero RM

Estado TRELLO

Estado RM

Asignado a

Asunto

...con color amarillo.

Si una fila cumple con las siguientes dos condiciones simult√°neamente:

En la columna "Estado TRELLO" contiene alguno de estos valores:

04 En Desarrollo | STAND BY

05 En Desarrollo | EN CURSO

07 En Prueba QA | BACKLOG

08 En Prueba QA | EN CURSO

10 Solicitud de Pasaje a PROD.

Y en la columna "Asignado a" se encuentra alguno de estos nombres:

Dario Elola

Nelson Daniel Bord√≥n

Valentina Juszkiewicz

Renzo Antonioli

Lucas Gutierrez

Vanina Zylberg

Carolina Noemi Gualdi

Franchesca Gabriela Rivas Veliz

Entonces, rellen√° esa fila en las columnas:

N√∫mero RM

Estado TRELLO

Estado RM

Asignado a

Asunto

...con color rojo.

üì¶ Entrega esperada

Un archivo Excel (.xlsx) generado con la estructura anterior, correctamente combinado y con los colores aplicados seg√∫n las reglas definidas.

- **‚ûï Nueva regla adicional de resaltado:**

  Si en un registro la columna **"Estado TRELLO"** contiene alguno de estos valores:

  - `05 En Desarrollo | EN CURSO`

  Y en la columna **"Estado RM"** existe cualquier texto que no contenga las palabras **"Desarrollo"** (no distingue may√∫sculas o min√∫sculas), entonces:

  Rellen√° toda la fila correspondiente de las columnas:

  - N√∫mero RM  
  - Estado TRELLO  
  - Estado RM  
  - Asignado a  
  - Asunto  

  ...con color **rojo**.

 Si en un registro la columna **"Estado TRELLO"** NO contiene alguno de estos valores:

  - `05 En Desarrollo | EN CURSO`

  Y en la columna **"Estado RM"** existe cualquier texto que contenga las palabras **"Desarrollo"** (no distingue may√∫sculas o min√∫sculas), entonces:

  Rellen√° toda la fila correspondiente de las columnas:

  - N√∫mero RM  
  - Estado TRELLO  
  - Estado RM  
  - Asignado a  
  - Asunto  

  ...con color **rojo**.
  
    Si en un registro la columna **"Estado TRELLO"** contiene alguno de estos valores:

  - `04 En Desarrollo | STAND BY`

  Y en la columna **"Estado RM"** existe cualquier texto que no contenga las palabras **"STAND BY"** (no distingue may√∫sculas o min√∫sculas), entonces:

  Rellen√° toda la fila correspondiente de las columnas:

  - N√∫mero RM  
  - Estado TRELLO  
  - Estado RM  
  - Asignado a  
  - Asunto  

  ...con color **rojo**.

Nuevo criterio agregado (adem√°s de los ya existentes):

Si la columna "Asunto" est√° vac√≠a, entonces:

Rellenar toda la fila correspondiente de las columnas:

N√∫mero RM

Estado TRELLO

Estado RM

Asignado a

Asunto

...con color amarillo.



IMPORTANTE: Realiza el proceso de principio a fin, hasta llegar a la generacion de del archivo .xlsx para descargar sin consultarme. No omitas ninguna de las intrucciones anteriores... Revisa y asegurate que se aplique todo.

SUMO EJEMPLO DEL PAYTHON CON EL PROCESO:

import pandas as pd
import re
from openpyxl import Workbook
from openpyxl.styles import PatternFill
from openpyxl.utils.dataframe import dataframe_to_rows

# Funci√≥n para leer CSV con m√∫ltiples codificaciones posibles
def read_csv_with_fallback(filepath, delimiter=','):
    for encoding in ['utf-8', 'utf-8-sig', 'latin1']:
        try:
            return pd.read_csv(filepath, encoding=encoding, delimiter=delimiter)
        except Exception:
            continue
    raise Exception(f"No se pudo leer el archivo {filepath} con codificaciones comunes.")

# Rutas de archivos
archivo_principal = '1743693135790.csv'
archivo_issues = 'issues.csv'

# Leer archivos
main_df = read_csv_with_fallback(archivo_principal, delimiter=',')
issues_df = read_csv_with_fallback(archivo_issues, delimiter=';')

# Paso 1: Extraer n√∫mero entre "RM" y "|"
def extract_rm(text):
    match = re.search(r'RM\s*(\d+)\s*\|', str(text))
    return int(match.group(1)) if match else None

main_df['N√∫mero RM'] = main_df.iloc[:, 0].apply(extract_rm)
main_df['Estado TRELLO'] = main_df.iloc[:, 3]

# Paso 2: Cruce con issues.csv
merged_df = pd.merge(
    main_df[['N√∫mero RM', 'Estado TRELLO']],
    issues_df,
    left_on='N√∫mero RM',
    right_on=issues_df.columns[0],
    how='left'
)

# Renombrar columnas
merged_df.rename(columns={
    'N√∫mero RM': 'N√∫mero RM',
    'Estado TRELLO': 'Estado TRELLO',
    'Estado': 'Estado RM',
    'Asignado a': 'Asignado a',
    'Asunto': 'Asunto'
}, inplace=True)

# Reordenar columnas
merged_df = merged_df[['N√∫mero RM', 'Estado TRELLO', 'Estado RM', 'Asignado a', 'Asunto']]

# Paso 3: Formato condicional con openpyxl
yellow_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")
red_fill = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")

wb = Workbook()
ws = wb.active
ws.title = "Consolidado"

# Escribir encabezado y datos
for row in dataframe_to_rows(merged_df, index=False, header=True):
    ws.append(row)

# Listas de condiciones
estado_trello_rojo = [
    "04 En Desarrollo | STAND BY",
    "05 En Desarrollo | EN CURSO",
    "07 En Prueba QA | BACKLOG",
    "08 En Prueba QA | EN CURSO",
    "10 Solicitud de Pasaje a PROD."
]

asignados_rojo = [
    "Dario Elola",
    "Nelson Daniel Bord√≥n",
    "Valentina Juszkiewicz",
    "Renzo Antonioli",
    "Lucas Gutierrez",
    "Vanina Zylberg",
    "Carolina Noemi Gualdi",
    "Franchesca Gabriela Rivas Veliz"
]

# Aplicar condiciones a cada fila
for i, row in enumerate(ws.iter_rows(min_row=2, max_row=ws.max_row), start=2):
    estado_trello = str(row[1].value or "")
    estado_rm = str(row[2].value or "").lower()
    asignado = str(row[3].value or "")
    asunto = str(row[4].value or "")

    # Condici√≥n: Estado RM vac√≠o o Asunto vac√≠o -> Amarillo
    if not row[2].value or not row[4].value:
        for cell in row:
            cell.fill = yellow_fill
        continue

    # Condici√≥n roja 1: Estado TRELLO + Asignado
    if estado_trello in estado_trello_rojo and asignado in asignados_rojo:
        for cell in row:
            cell.fill = red_fill
        continue

    # Condici√≥n roja adicional 1
    if estado_trello == "05 En Desarrollo | EN CURSO" and "desarrollo" not in estado_rm:
        for cell in row:
            cell.fill = red_fill
        continue

    # Condici√≥n roja adicional 2
    if estado_trello != "05 En Desarrollo | EN CURSO" and "desarrollo" in estado_rm:
        for cell in row:
            cell.fill = red_fill
        continue

    # Condici√≥n roja adicional 3
    if estado_trello == "04 En Desarrollo | STAND BY" and "stand by" not in estado_rm:
        for cell in row:
            cell.fill = red_fill
        continue

# Guardar Excel
output_path = 'consolidado_rm.xlsx'
wb.save(output_path)
print(f"Archivo generado: {output_path}")
