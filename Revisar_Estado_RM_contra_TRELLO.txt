Solicitud de procesamiento de datos a partir de archivos CSV y generaci√≥n de archivo Excel consolidado

Hola, necesito que proceses dos archivos CSV para generar un nuevo archivo Excel con informaci√≥n combinada. A continuaci√≥n, detallo todos los pasos que deb√©s seguir cuidadosamente para que el proceso sea exitoso:

üîπ Archivos involucrados

Archivo principal

El nombre del archivo es una cadena num√©rica (por ejemplo: 123456.csv).

Est√° delimitado por comas (,).

Contiene una columna A con cadenas de texto que incluyen un n√∫mero entre la palabra "RM" y el s√≠mbolo "|".

La columna D contiene informaci√≥n adicional que debe ser extra√≠da completa.

Archivo adicional (referencial)

Nombre: issues.csv

Delimitado por punto y coma (;)

Contiene una columna con valores num√©ricos (formato int64) que deben ser comparados con los n√∫meros extra√≠dos del archivo principal.

‚ö†Ô∏è Consideraciones importantes

La columna del archivo principal contiene los n√∫meros como texto (string), mientras que issues.csv los tiene como n√∫meros (int64).

Convert√≠ los valores extra√≠dos del archivo principal a tipo num√©rico antes de realizar el cruce.

Si al leer alguno de los archivos ocurre un error de codificaci√≥n, intent√° reabrirlos utilizando una codificaci√≥n alternativa como:

"utf-8-sig"

"latin1"

üîÑ Proceso detallado

‚úÖ Paso 1: Extracci√≥n de datos del archivo principal

Desde la Columna A, extra√© √∫nicamente los n√∫meros ubicados entre la palabra "RM" y el s√≠mbolo "|" en cada celda.

Manten√© el encabezado original de la columna A.

Extra√© tambi√©n el contenido completo de la Columna D, incluyendo su encabezado.

‚úÖ Paso 2: Cruce con issues.csv

Us√° los n√∫meros extra√≠dos de la Columna A como clave de b√∫squeda para encontrar coincidencias en issues.csv.

Por cada coincidencia, extra√© los siguientes campos:

El valor de la columna "Estado".

El valor de la columna "Asignado a".

‚úÖ Paso 3: Generaci√≥n del archivo Excel final

Cre√° un archivo .xlsx con la siguiente estructura:

Columna	Descripci√≥n
A	N√∫meros extra√≠dos de la Columna A del archivo principal (Nombre en Excel: N√∫mero RM)
B	Contenido de la Columna D del archivo principal (Nombre en Excel: Estado TRELLO)
C	Valor de la columna "Estado" desde issues.csv (Nombre en Excel: Estado RM)
D	Valor de la columna "Asignado a" desde issues.csv (Nombre en Excel: Asignado a)
E	Valor de la columna "Asunto" desde issues.csv (Nombre en Excel: Asunto)
üé® Formato y resaltado condicional en Excel

- Encabezados en MAY√öSCULAS, negrita, fondo gris claro.
- Si ASUNTO est√° vac√≠o:
  - Completar con "RM CERREDO"
  - Resaltar toda la fila en amarillo.

- Si "Estado RM est√° vac√≠o:
  - Completar con "RM CERREDO"
  - Resaltar toda la fila en amarillo.

Si una fila cumple con las siguientes dos condiciones simult√°neamente:

En la columna "Estado TRELLO" contiene alguno de estos valores:

04 En Desarrollo | STAND BY

05 En Desarrollo | EN CURSO

07 En Prueba QA | BACKLOG

08 En Prueba QA | EN CURSO

10 Solicitud de Pasaje a PROD.

Y en la columna "Asignado a" se encuentra alguno de estos nombres:

Dario Elola

Nelson Daniel Bord√≥n

Valentina Juszkiewicz

Renzo Antonioli

Lucas Gutierrez

Vanina Zylberg

Carolina Noemi Gualdi

Franchesca Gabriela Rivas Veliz

Entonces, rellen√° esa fila en las columnas:

N√∫mero RM

Estado TRELLO

Estado RM

Asignado a

Asunto

...con color rojo.

üì¶ Entrega esperada

Un archivo Excel (.xlsx) generado con la estructura anterior, correctamente combinado y con los colores aplicados seg√∫n las reglas definidas.

- **‚ûï Nueva regla adicional de resaltado:**

  Si en un registro la columna **"Estado TRELLO"** contiene alguno de estos valores:

  - `05 En Desarrollo | EN CURSO`

  Y en la columna **"Estado RM"** existe cualquier texto que no contenga las palabras **"Desarrollo"** (no distingue may√∫sculas o min√∫sculas), entonces:

  Rellen√° toda la fila correspondiente de las columnas:

  - N√∫mero RM  
  - Estado TRELLO  
  - Estado RM  
  - Asignado a  
  - Asunto  

  ...con color **rojo**.

 Si en un registro la columna **"Estado TRELLO"** NO contiene alguno de estos valores:

  - `05 En Desarrollo | EN CURSO`

  Y en la columna **"Estado RM"** existe cualquier texto que contenga las palabras **"Desarrollo"** (no distingue may√∫sculas o min√∫sculas), entonces:

  Rellen√° toda la fila correspondiente de las columnas:

  - N√∫mero RM  
  - Estado TRELLO  
  - Estado RM  
  - Asignado a  
  - Asunto  

  ...con color **rojo**.
  
    Si en un registro la columna **"Estado TRELLO"** contiene alguno de estos valores:

  - `04 En Desarrollo | STAND BY`

  Y en la columna **"Estado RM"** existe cualquier texto que no contenga las palabras **"STAND BY"** (no distingue may√∫sculas o min√∫sculas), entonces:

  Rellen√° toda la fila correspondiente de las columnas:

  - N√∫mero RM  
  - Estado TRELLO  
  - Estado RM  
  - Asignado a  
  - Asunto  

  ...con color **rojo**.


IMPORTANTE: Realiza el proceso de principio a fin, hasta llegar a la generacion de del archivo .xlsx para descargar sin consultarme. No omitas ninguna de las intrucciones anteriores... Revisa y asegurate que se aplique todo.

SUMO EJEMPLO DEL PAYTHON CON EL PROCESO:


import pandas as pd
import re
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.styles.colors import Color

# Intentar leer los archivos con diferentes codificaciones
def read_file(filepath, sep, encodings=['utf-8', 'utf-8-sig', 'latin1']):
    for encoding in encodings:
        try:
            return pd.read_csv(filepath, sep=sep, encoding=encoding)
        except Exception:
            continue
    raise Exception(f"No se pudo leer el archivo: {filepath}")

# Leer archivo principal
main_file = read_file('/mnt/data/123456.csv', sep=',')

# Extraer n√∫mero entre "RM" y "|"
main_file['N√∫mero RM'] = main_file.iloc[:, 0].str.extract(r'RM\s*(\d+)\s*\|')
main_file['N√∫mero RM'] = pd.to_numeric(main_file['N√∫mero RM'], errors='coerce')

# Extraer columna D como 'Estado TRELLO'
main_file['Estado TRELLO'] = main_file.iloc[:, 3]

# Leer archivo issues.csv
issues_file = read_file('/mnt/data/issues.csv', sep=';')

# Convertir columna clave en issues.csv a int64
issues_file.iloc[:, 0] = pd.to_numeric(issues_file.iloc[:, 0], errors='coerce')

# Renombrar columnas para facilitar merge
issues_file.columns = ['N√∫mero RM', 'Estado RM', 'Asignado a', 'Asunto']

# Unir los dataframes
merged_df = pd.merge(main_file[['N√∫mero RM', 'Estado TRELLO']], issues_file, on='N√∫mero RM', how='left')

# Completar valores vac√≠os
merged_df['Estado RM'].fillna("RM CERREDO", inplace=True)
merged_df['Asunto'].fillna("RM CERREDO", inplace=True)

# Crear archivo Excel con estilos
wb = Workbook()
ws = wb.active
ws.title = "Consolidado"

# Encabezados
headers = ['N√∫mero RM', 'Estado TRELLO', 'Estado RM', 'Asignado a', 'Asunto']
ws.append(headers)

# Aplicar estilo a encabezados
header_fill = PatternFill(start_color="D3D3D3", end_color="D3D3D3", fill_type="solid")
header_font = Font(bold=True)
for col in range(1, len(headers) + 1):
    cell = ws.cell(row=1, column=col)
    cell.font = header_font
    cell.fill = header_fill

# Definir reglas para resaltar en rojo
estado_trello_cond1 = [
    "04 En Desarrollo | STAND BY",
    "05 En Desarrollo | EN CURSO",
    "07 En Prueba QA | BACKLOG",
    "08 En Prueba QA | EN CURSO",
    "10 Solicitud de Pasaje a PROD."
]

asignados_cond1 = [
    "Dario Elola", "Nelson Daniel Bord√≥n", "Valentina Juszkiewicz", "Renzo Antonioli",
    "Lucas Gutierrez", "Vanina Zylberg", "Carolina Noemi Gualdi", "Franchesca Gabriela Rivas Veliz"
]

# Colores
yellow_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")
red_fill = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")

# Cargar datos con formato condicional
for index, row in merged_df.iterrows():
    estado_trello = str(row['Estado TRELLO'])
    estado_rm = str(row['Estado RM'])
    asignado_a = str(row['Asignado a'])
    asunto = str(row['Asunto'])

    values = [row['N√∫mero RM'], estado_trello, estado_rm, asignado_a, asunto]
    ws.append(values)

    row_idx = ws.max_row
    apply_yellow = (asunto == "RM CERREDO") or (estado_rm == "RM CERREDO")
    apply_red = (
        (estado_trello in estado_trello_cond1 and asignado_a in asignados_cond1)
        or (estado_trello == "05 En Desarrollo | EN CURSO" and "desarrollo" not in estado_rm.lower())
        or (estado_trello != "05 En Desarrollo | EN CURSO" and "desarrollo" in estado_rm.lower())
        or (estado_trello == "04 En Desarrollo | STAND BY" and "stand by" not in estado_rm.lower())
    )

    fill = red_fill if apply_red else yellow_fill if apply_yellow else None

    if fill:
        for col in range(1, 6):
            ws.cell(row=row_idx, column=col).fill = fill

# Guardar el archivo
output_path = "/mnt/data/consolidado_resultado.xlsx"
wb.save(output_path)

output_path
