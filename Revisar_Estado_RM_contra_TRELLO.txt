A partir de este prompt, armar el cofigo python para realizar este proceso: dejo adjunto un ejemplo de los archivos para que tengas mas referencia: Solicitud de procesamiento de datos a partir de archivos CSV y generaci√≥n de archivo Excel consolidado

Hola, necesito que proceses dos archivos CSV para generar un nuevo archivo Excel con informaci√≥n combinada. A continuaci√≥n, detallo todos los pasos que deb√©s seguir cuidadosamente para que el proceso sea exitoso:

üîπ Archivos involucrados

Archivo principal

El nombre del archivo es una cadena num√©rica (por ejemplo: 123456.csv).

Est√° delimitado por comas (,).

Contiene una columna A con cadenas de texto que incluyen un n√∫mero entre la palabra "RM" y el s√≠mbolo "|".

La columna D contiene informaci√≥n adicional que debe ser extra√≠da completa.

Archivo adicional (referencial)

Nombre: issues.csv

Delimitado por punto y coma (;)

Contiene una columna con valores num√©ricos (formato int64) que deben ser comparados con los n√∫meros extra√≠dos del archivo principal.

‚ö†Ô∏è Consideraciones importantes

La columna del archivo principal contiene los n√∫meros como texto (string), mientras que issues.csv los tiene como n√∫meros (int64).

Convert√≠ los valores extra√≠dos del archivo principal a tipo num√©rico antes de realizar el cruce.

Si al leer alguno de los archivos ocurre un error de codificaci√≥n, intent√° reabrirlos utilizando una codificaci√≥n alternativa como:

"utf-8-sig"

"latin1"

üîÑ Proceso detallado

‚úÖ Paso 1: Extracci√≥n de datos del archivo principal

Desde la Columna A, extra√© √∫nicamente los n√∫meros ubicados entre la palabra "RM" y el s√≠mbolo "|" en cada celda.

Manten√© el encabezado original de la columna A.

Extra√© tambi√©n el contenido completo de la Columna D, incluyendo su encabezado.

Extra√© tambi√©n de la Columna C, las cadenas "ROBUSTECIMIENTO" o "CIERRE CUENTA DE INVERSI√ìN" o "INCIDENCIA PRODUCTIVA" o "[ PRIORIDAD ... ]" (tener en cuenta qie el numero de la prioridad puede ir variando) Dentro de esta celda cada una de las cadena estan separadas por ",". En caso de encontrar mas de una de las cadenas especificadas en una de las celdas, extraer todas.

‚úÖ Paso 2: Cruce con issues.csv

Us√° los n√∫meros extra√≠dos de la Columna A como clave de b√∫squeda para encontrar coincidencias en issues.csv.

Por cada coincidencia, extra√© los siguientes campos:

El valor de la columna "Estado".

El valor de la columna "Asignado a".

‚úÖ Paso 3: Generaci√≥n del archivo Excel final

Cre√° un archivo .xlsx con la siguiente estructura:

Columna	Descripci√≥n
A	N√∫meros extra√≠dos de la Columna A del archivo principal (Nombre en Excel: N√∫mero RM)
B	Contenido de la Columna D del archivo principal (Nombre en Excel: Estado TRELLO)
C	Valor de la columna "Estado" desde issues.csv (Nombre en Excel: Estado RM)
D	Valor de la columna "Asignado a" desde issues.csv (Nombre en Excel: Asignado a)
E	Valor de la columna "Asunto" desde issues.csv (Nombre en Excel: Asunto)
F   Completar con la palabra "SI", en el caso que dentro del Contenido extraido de la Columna D del archivo principal, se haya encontrado la cadena "ROBUSTECIMIENTO". (Nombre en Excel: ROBUSTECIMIENTO)
G   Completar con la palabra "SI", en el caso que dentro del Contenido extraido de la Columna D del archivo principal, se haya encontrado la cadena "CIERRE CUENTA DE INVERSI√ìN". (Nombre en Excel: CIERRE CUENTA DE INVERSI√ìN)
H  Completar con la palabra "SI", en el caso que dentro del Contenido extraido de la Columna D del archivo principal, se haya encontrado la cadena "INCIDENCIA PRODUCTIVA". (Nombre en Excel: INCIDENCIA PRODUCTIVA)
I  Completar con la cadena de "prioridad" [ PRIORIDAD 0X ], en el caso que dentro del Contenido extra√≠do de la Columna D del archivo principal, se haya encontrado la cadena "[ PRIORIDAD 02 ]". (Nombre en Excel: PRIORIDAD)

üé® Formato y resaltado condicional en Excel

- Encabezados en MAY√öSCULAS, negrita, fondo gris claro.
- Si ASUNTO est√° vac√≠o:
  - Completar con "RM CERREDO"
  - Resaltar toda la fila en amarillo.

- Si "Estado RM est√° vac√≠o:
  - Completar con "RM CERREDO"
  - Resaltar toda la fila en amarillo.

Si una fila cumple con las siguientes dos condiciones simult√°neamente:

En la columna "Estado TRELLO" contiene alguno de estos valores:

04 En Desarrollo | STAND BY

05 En Desarrollo | EN CURSO

07 En Prueba QA | BACKLOG

08 En Prueba QA | EN CURSO

10 Solicitud de Pasaje a PROD.

Y en la columna "Asignado a" se encuentra alguno de estos nombres:

Dario Elola

Nelson Daniel Bord√≥n

Valentina Juszkiewicz

Renzo Antonioli

Lucas Gutierrez

Vanina Zylberg

Carolina Noemi Gualdi

Franchesca Gabriela Rivas Veliz

Entonces, rellen√° esa fila en las columnas:

N√∫mero RM

Estado TRELLO

Estado RM

Asignado a

Asunto

...con color rojo.

üì¶ Entrega esperada

Un archivo Excel (.xlsx) generado con la estructura anterior, correctamente combinado y con los colores aplicados seg√∫n las reglas definidas.

- **‚ûï Nueva regla adicional de resaltado:**

  Si en un registro la columna **"Estado TRELLO"** contiene alguno de estos valores:

  - `05 En Desarrollo | EN CURSO`

  Y en la columna **"Estado RM"** existe cualquier texto que no contenga las palabras **"Desarrollo"** (no distingue may√∫sculas o min√∫sculas), entonces:

  Rellen√° toda la fila correspondiente de las columnas:

  - N√∫mero RM  
  - Estado TRELLO  
  - Estado RM  
  - Asignado a  
  - Asunto  

  ...con color **rojo**.

 Si en un registro la columna **"Estado TRELLO"** NO contiene alguno de estos valores:

  - `05 En Desarrollo | EN CURSO`

  Y en la columna **"Estado RM"** existe cualquier texto que contenga las palabras **"Desarrollo"** (no distingue may√∫sculas o min√∫sculas), entonces:

  Rellen√° toda la fila correspondiente de las columnas:

  - N√∫mero RM  
  - Estado TRELLO  
  - Estado RM  
  - Asignado a  
  - Asunto  

  ...con color **rojo**.
  
    Si en un registro la columna **"Estado TRELLO"** contiene alguno de estos valores:

  - `04 En Desarrollo | STAND BY`

  Y en la columna **"Estado RM"** existe cualquier texto que no contenga las palabras **"STAND BY"** (no distingue may√∫sculas o min√∫sculas), entonces:

  Rellen√° toda la fila correspondiente de las columnas:

  - N√∫mero RM  
  - Estado TRELLO  
  - Estado RM  
  - Asignado a  
  - Asunto  

  ...con color **rojo**.


IMPORTANTE: Realiza el proceso de principio a fin, hasta llegar a la generacion de del archivo .xlsx para descargar sin consultarme. No omitas ninguna de las intrucciones anteriores... Revisa y asegurate que se aplique todo.


SUMO EJEMPLO DEL PAYTHON CON EL PROCESO:

import pandas as pd
import re
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill
from openpyxl.utils.dataframe import dataframe_to_rows

# Ruta de los archivos cargados
main_file_path = "/mnt/data/1744027626670.csv"
issues_file_path = "/mnt/data/issues.csv"

# Intento de lectura del archivo principal con diferentes codificaciones
def read_file_with_encodings(filepath, sep, encodings):
    for enc in encodings:
        try:
            return pd.read_csv(filepath, sep=sep, encoding=enc)
        except Exception:
            continue
    raise ValueError(f"No se pudo leer el archivo: {filepath}")

# Leer archivo principal
main_encodings = ["utf-8", "utf-8-sig", "latin1"]
main_df = read_file_with_encodings(main_file_path, ",", main_encodings)

# Leer issues.csv
issues_encodings = ["utf-8", "utf-8-sig", "latin1"]
issues_df = read_file_with_encodings(issues_file_path, ";", issues_encodings)

# Extraer n√∫mero RM de la columna A
def extract_rm(text):
    match = re.search(r"RM\s*(\d+)\s*\|", str(text))
    return int(match.group(1)) if match else None

main_df["N√∫mero RM"] = main_df.iloc[:, 0].apply(extract_rm)

# Extraer columna D
main_df["Estado TRELLO"] = main_df.iloc[:, 3]

# Extraer etiquetas de inter√©s de la columna C
def extract_tags(text):
    tags = {
        "ROBUSTECIMIENTO": "NO",
        "CIERRE CUENTA DE INVERSI√ìN": "NO",
        "INCIDENCIA PRODUCTIVA": "NO",
        "PRIORIDAD": ""
    }
    parts = str(text).split(",")
    for part in parts:
        part = part.strip()
        for tag in tags:
            if tag in part:
                if tag == "PRIORIDAD":
                    tags[tag] = part
                else:
                    tags[tag] = "SI"
    return pd.Series([tags["ROBUSTECIMIENTO"], tags["CIERRE CUENTA DE INVERSI√ìN"],
                      tags["INCIDENCIA PRODUCTIVA"], tags["PRIORIDAD"]])

main_df[["ROBUSTECIMIENTO", "CIERRE CUENTA DE INVERSI√ìN", "INCIDENCIA PRODUCTIVA", "PRIORIDAD"]] = main_df.iloc[:, 2].apply(extract_tags)

# Cruce con issues.csv
issues_df["N√∫mero RM"] = issues_df.iloc[:, 0]
merged_df = pd.merge(main_df, issues_df, how="left", on="N√∫mero RM")

# Selecci√≥n y renombrado de columnas
final_df = merged_df[[
    "N√∫mero RM",
    "Estado TRELLO",
    "Estado", 
    "Asignado a", 
    "Asunto", 
    "ROBUSTECIMIENTO", 
    "CIERRE CUENTA DE INVERSI√ìN", 
    "INCIDENCIA PRODUCTIVA", 
    "PRIORIDAD"
]]

final_df.columns = [
    "N√∫mero RM",
    "Estado TRELLO",
    "Estado RM",
    "Asignado a",
    "Asunto",
    "ROBUSTECIMIENTO",
    "CIERRE CUENTA DE INVERSI√ìN",
    "INCIDENCIA PRODUCTIVA",
    "PRIORIDAD"
]

# Reemplazar valores faltantes seg√∫n condiciones
def check_and_fill(row):
    if pd.isna(row["Estado RM"]) or pd.isna(row["Asunto"]):
        row["Estado RM"] = row["Estado RM"] if pd.notna(row["Estado RM"]) else "RM CERREDO"
        row["Asunto"] = row["Asunto"] if pd.notna(row["Asunto"]) else "RM CERREDO"
        row["resaltar_amarillo"] = True
    else:
        row["resaltar_amarillo"] = False
    return row

final_df = final_df.apply(check_and_fill, axis=1)

# Reglas de resaltado rojo
def resaltar_rojo(row):
    trello_estado = str(row["Estado TRELLO"]).strip().lower()
    rm_estado = str(row["Estado RM"]).strip().lower()
    asignado = str(row["Asignado a"]).strip()
    nombres = [
        "Dario Elola", "Nelson Daniel Bord√≥n", "Valentina Juszkiewicz",
        "Renzo Antonioli", "Lucas Gutierrez", "Vanina Zylberg",
        "Carolina Noemi Gualdi", "Franchesca Gabriela Rivas Veliz"
    ]
    
    if (
        (row["Estado TRELLO"] in [
            "04 En Desarrollo | STAND BY", "05 En Desarrollo | EN CURSO",
            "07 En Prueba QA | BACKLOG", "08 En Prueba QA | EN CURSO",
            "10 Solicitud de Pasaje a PROD."
        ] and asignado in nombres)
        or ("05 En Desarrollo | EN CURSO" in row["Estado TRELLO"] and "desarrollo" not in rm_estado)
        or ("05 En Desarrollo | EN CURSO" not in row["Estado TRELLO"] and "desarrollo" in rm_estado)
        or ("04 En Desarrollo | STAND BY" in row["Estado TRELLO"] and "stand by" not in rm_estado)
    ):
        return True
    return False

final_df["resaltar_rojo"] = final_df.apply(resaltar_rojo, axis=1)

# Crear archivo Excel
wb = Workbook()
ws = wb.active
ws.title = "Resumen RM"

# Encabezado con formato
headers = list(final_df.columns[:-2])  # sin columnas de control
ws.append(headers)
header_font = Font(bold=True)
header_fill = PatternFill(start_color="DDDDDD", end_color="DDDDDD", fill_type="solid")
for cell in ws[1]:
    cell.font = header_font
    cell.fill = header_fill

# Estilos
yellow_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")
red_fill = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")

# Agregar filas y aplicar formatos
for _, row in final_df.iterrows():
    excel_row = [row[col] for col in headers]
    ws.append(excel_row)
    current_row = ws.max_row
    if row["resaltar_amarillo"]:
        for col in range(1, len(headers) + 1):
            ws.cell(row=current_row, column=col).fill = yellow_fill
    elif row["resaltar_rojo"]:
        for col in range(1, len(headers) + 1):
            ws.cell(row=current_row, column=col).fill = red_fill

# Guardar archivo
output_path = "/mnt/data/archivo_consolidado.xlsx"
wb.save(output_path)

output_path
