Solicitud de procesamiento de datos a partir de archivos CSV y generaci√≥n de archivo Excel consolidado

Hola, necesito que proceses dos archivos CSV para generar un nuevo archivo Excel con informaci√≥n combinada. A continuaci√≥n, detallo todos los pasos que deb√©s seguir cuidadosamente para que el proceso sea exitoso:

üîπ Archivos involucrados

Archivo principal

El nombre del archivo es una cadena num√©rica (por ejemplo: 123456.csv).

Est√° delimitado por comas (,).

Contiene una columna A con cadenas de texto que incluyen un n√∫mero entre la palabra "RM" y el s√≠mbolo "|".

La columna D contiene informaci√≥n adicional que debe ser extra√≠da completa.

Archivo adicional (referencial)

Nombre: issues.csv

Delimitado por punto y coma (;)

Contiene una columna con valores num√©ricos (formato int64) que deben ser comparados con los n√∫meros extra√≠dos del archivo principal.

‚ö†Ô∏è Consideraciones importantes

La columna del archivo principal contiene los n√∫meros como texto (string), mientras que issues.csv los tiene como n√∫meros (int64).

Convert√≠ los valores extra√≠dos del archivo principal a tipo num√©rico antes de realizar el cruce.

Si al leer alguno de los archivos ocurre un error de codificaci√≥n, intent√° reabrirlos utilizando una codificaci√≥n alternativa como:

"utf-8-sig"

"latin1"

üîÑ Proceso detallado

‚úÖ Paso 1: Extracci√≥n de datos del archivo principal

Desde la Columna A, extra√© √∫nicamente los n√∫meros ubicados entre la palabra "RM" y el s√≠mbolo "|" en cada celda.

Manten√© el encabezado original de la columna A.

Extra√© tambi√©n el contenido completo de la Columna D, incluyendo su encabezado.

‚úÖ Paso 2: Cruce con issues.csv

Us√° los n√∫meros extra√≠dos de la Columna A como clave de b√∫squeda para encontrar coincidencias en issues.csv.

Por cada coincidencia, extra√© los siguientes campos:

El valor de la columna "Estado".

El valor de la columna "Asignado a".

‚úÖ Paso 3: Generaci√≥n del archivo Excel final

Cre√° un archivo .xlsx con la siguiente estructura:

Columna	Descripci√≥n
A	N√∫meros extra√≠dos de la Columna A del archivo principal (Nombre en Excel: N√∫mero RM)
B	Contenido de la Columna D del archivo principal (Nombre en Excel: Estado TRELLO)
C	Valor de la columna "Estado" desde issues.csv (Nombre en Excel: Estado RM)
D	Valor de la columna "Asignado a" desde issues.csv (Nombre en Excel: Asignado a)
E	Valor de la columna "Asunto" desde issues.csv (Nombre en Excel: Asunto)
üé® Formato y resaltado condicional en Excel

Si una celda en la columna "Estado RM" est√° vac√≠a, rellen√° toda la fila correspondiente de las columnas:

N√∫mero RM

Estado TRELLO

Estado RM

Asignado a

Asunto

...con color amarillo.

Si una celda en la columna "Asunto" est√° vac√≠a (es decir que no encotro registro en issues para ese numero de RM , rellen√° toda la fila correspondiente de las columnas:

N√∫mero RM

Estado TRELLO

Estado RM

Asignado a

Asunto

...con color amarillo.

Si una fila cumple con las siguientes dos condiciones simult√°neamente:

En la columna "Estado TRELLO" contiene alguno de estos valores:

04 En Desarrollo | STAND BY

05 En Desarrollo | EN CURSO

07 En Prueba QA | BACKLOG

08 En Prueba QA | EN CURSO

10 Solicitud de Pasaje a PROD.

Y en la columna "Asignado a" se encuentra alguno de estos nombres:

Dario Elola

Nelson Daniel Bord√≥n

Valentina Juszkiewicz

Renzo Antonioli

Lucas Gutierrez

Vanina Zylberg

Carolina Noemi Gualdi

Franchesca Gabriela Rivas Veliz

Entonces, rellen√° esa fila en las columnas:

N√∫mero RM

Estado TRELLO

Estado RM

Asignado a

Asunto

...con color rojo.

üì¶ Entrega esperada

Un archivo Excel (.xlsx) generado con la estructura anterior, correctamente combinado y con los colores aplicados seg√∫n las reglas definidas.

- **‚ûï Nueva regla adicional de resaltado:**

  Si en un registro la columna **"Estado TRELLO"** contiene alguno de estos valores:

  - `05 En Desarrollo | EN CURSO`

  Y en la columna **"Estado RM"** existe cualquier texto que no contenga las palabras **"Desarrollo"** (no distingue may√∫sculas o min√∫sculas), entonces:

  Rellen√° toda la fila correspondiente de las columnas:

  - N√∫mero RM  
  - Estado TRELLO  
  - Estado RM  
  - Asignado a  
  - Asunto  

  ...con color **rojo**.

 Si en un registro la columna **"Estado TRELLO"** NO contiene alguno de estos valores:

  - `05 En Desarrollo | EN CURSO`

  Y en la columna **"Estado RM"** existe cualquier texto que contenga las palabras **"Desarrollo"** (no distingue may√∫sculas o min√∫sculas), entonces:

  Rellen√° toda la fila correspondiente de las columnas:

  - N√∫mero RM  
  - Estado TRELLO  
  - Estado RM  
  - Asignado a  
  - Asunto  

  ...con color **rojo**.
  
    Si en un registro la columna **"Estado TRELLO"** contiene alguno de estos valores:

  - `04 En Desarrollo | STAND BY`

  Y en la columna **"Estado RM"** existe cualquier texto que no contenga las palabras **"STAND BY"** (no distingue may√∫sculas o min√∫sculas), entonces:

  Rellen√° toda la fila correspondiente de las columnas:

  - N√∫mero RM  
  - Estado TRELLO  
  - Estado RM  
  - Asignado a  
  - Asunto  

  ...con color **rojo**.


IMPORTANTE: Realiza el proceso de principio a fin, hasta llegar a la generacion de del archivo .xlsx para descargar sin consultarme. No omitas ninguna de las intrucciones anteriores... Revisa y asegurate que se aplique todo.

SUMO EJEMPLO DEL PAYTHON CON EL PROCESO:


import pandas as pd
import re
from openpyxl import Workbook
from openpyxl.styles import PatternFill
from openpyxl.utils.dataframe import dataframe_to_rows

# Intentar abrir los archivos con m√∫ltiples codificaciones
def read_csv_with_encoding_fallback(filepath, delimiter):
    encodings = ["utf-8", "utf-8-sig", "latin1"]
    for enc in encodings:
        try:
            return pd.read_csv(filepath, delimiter=delimiter, encoding=enc)
        except Exception:
            continue
    raise ValueError(f"No se pudo leer el archivo {filepath} con las codificaciones esperadas.")

# Cargar archivos
archivo_principal = read_csv_with_encoding_fallback("/mnt/data/123456.csv", ",")
archivo_issues = read_csv_with_encoding_fallback("/mnt/data/issues.csv", ";")

# Paso 1: Extracci√≥n de n√∫meros RM y columna D
archivo_principal["N√∫mero RM"] = archivo_principal.iloc[:, 0].str.extract(r"RM(\d+)\|")[0].astype("Int64")
archivo_principal["Estado TRELLO"] = archivo_principal.iloc[:, 3]

# Paso 2: Cruce con issues.csv
archivo_issues["N√∫mero RM"] = archivo_issues.iloc[:, 0].astype("Int64")

df_merged = pd.merge(
    archivo_principal[["N√∫mero RM", "Estado TRELLO"]],
    archivo_issues,
    how="left",
    on="N√∫mero RM"
)

# Selecci√≥n y renombramiento de columnas
df_final = df_merged[["N√∫mero RM", "Estado TRELLO", "Estado", "Asignado a", "Asunto"]].copy()
df_final.columns = ["N√∫mero RM", "Estado TRELLO", "Estado RM", "Asignado a", "Asunto"]

# Paso 3: Crear archivo Excel con formato
wb = Workbook()
ws = wb.active
ws.title = "Consolidado"

# Agregar encabezado y datos
for r in dataframe_to_rows(df_final, index=False, header=True):
    ws.append(r)

# Definir colores
amarillo = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")
rojo = PatternFill(start_color="FF0000", end_color="FF0000", fill_type="solid")

# Definiciones para reglas
nombres_rojo = [
    "Dario Elola", "Nelson Daniel Bord√≥n", "Valentina Juszkiewicz", "Renzo Antonioli",
    "Lucas Gutierrez", "Vanina Zylberg", "Carolina Noemi Gualdi", "Franchesca Gabriela Rivas Veliz"
]

estados_trello_rojo = [
    "04 En Desarrollo | STAND BY", "05 En Desarrollo | EN CURSO",
    "07 En Prueba QA | BACKLOG", "08 En Prueba QA | EN CURSO",
    "10 Solicitud de Pasaje a PROD."
]

# Aplicar reglas de formato
for row in ws.iter_rows(min_row=2, max_row=ws.max_row, max_col=5):
    num_rm, estado_trello, estado_rm, asignado, asunto = [cell.value for cell in row]
    row_fill = None

    # Regla 1: Estado RM o Asunto vac√≠o
    if not estado_rm or not asunto:
        row_fill = amarillo

    # Reglas avanzadas con rojo
    if estado_trello in estados_trello_rojo and asignado in nombres_rojo:
        row_fill = rojo

    if estado_trello == "05 En Desarrollo | EN CURSO" and estado_rm and "desarrollo" not in estado_rm.lower():
        row_fill = rojo

    if estado_trello != "05 En Desarrollo | EN CURSO" and estado_rm and "desarrollo" in estado_rm.lower():
        row_fill = rojo

    if estado_trello == "04 En Desarrollo | STAND BY" and estado_rm and "stand by" not in estado_rm.lower():
        row_fill = rojo

    if row_fill:
        for cell in row:
            cell.fill = row_fill

# Guardar archivo
output_path = "/mnt/data/consolidado_RM.xlsx"
wb.save(output_path)

output_path
